generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        BigInt  @id @default(autoincrement())
  firstName String
  lastName  String
  email     String  @unique
  password  String
  phone     String?
  role      Role

  serviceAsCustomer ServiceRecord[] @relation("CustomerServices")
  serviceAsEmployee ServiceRecord[] @relation("EmployeeServices")
  serviceAsMechanic ServiceRecord[] @relation("MechanicServices")

  bookingsAsCustomer Booking[] @relation("CustomerBookings")
  bookingsAsStaff    Booking[] @relation("StaffBookings")

  sales Sale[]
}

model Car {
  id        BigInt          @id @default(autoincrement())
  make      String
  model     String
  category  VehicleCategory
  year      Int
  price     Decimal         @db.Decimal(10, 2)
  imagePath String?
  fuel      String?
  km        Int?
  status    String?

  inventory Inventory[]
  services  ServiceRecord[]
  bookings  Booking[]
}

model Part {
  id         BigInt          @id @default(autoincrement())
  name       String
  category   VehicleCategory
  price      Decimal         @db.Decimal(10, 2)
  supplierId BigInt

  supplier     Supplier      @relation(fields: [supplierId], references: [id])
  inventory    Inventory[]
  serviceParts ServicePart[]
}

model Supplier {
  id          BigInt @id @default(autoincrement())
  name        String
  contactName String
  email       String
  phone       String

  parts Part[]
}

model Sale {
  id            BigInt      @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  paymentMethod String
  total         Decimal     @db.Decimal(10, 2)  // Changed from Float to Decimal

  userId        BigInt
  user          User     @relation(fields: [userId], references: [id])

  customerFirstName String
  customerLastName  String
  customerEmail     String
  customerPhone     String
  customerAddress   String
  customerCity      String
  customerPostalCode String

  saleItems SaleItem[]
}

model SaleItem {
  id       BigInt          @id @default(autoincrement())
  quantity BigInt
  price    Decimal         @db.Decimal(10, 2)  // Changed from Float to Decimal

  inventoryId BigInt
  inventory   Inventory @relation(fields: [inventoryId], references: [id])

  saleId BigInt
  sale   Sale @relation(fields: [saleId], references: [id])
}

model ServiceRecord {
  id          BigInt   @id @default(autoincrement())
  carId       BigInt
  employeeId  BigInt
  mechanicId  BigInt
  customerId  BigInt?
  description String
  price       Decimal  @db.Decimal(10, 2)
  serviceDate DateTime

  car      Car   @relation(fields: [carId], references: [id])
  employee User  @relation("EmployeeServices", fields: [employeeId], references: [id])
  mechanic User  @relation("MechanicServices", fields: [mechanicId], references: [id])
  customer User? @relation("CustomerServices", fields: [customerId], references: [id])

  partsUsed ServicePart[]
}

model ServicePart {
  id        BigInt @id @default(autoincrement())
  serviceId BigInt
  partId    BigInt
  quantity  Int

  service ServiceRecord @relation(fields: [serviceId], references: [id])
  part    Part          @relation(fields: [partId], references: [id])
}

model Inventory {
  id       BigInt  @id @default(autoincrement())
  carId    BigInt?
  partId   BigInt?
  quantity BigInt

  car       Car?       @relation(fields: [carId], references: [id])
  part      Part?      @relation(fields: [partId], references: [id])
  saleItems SaleItem[]
}

model Booking {
  id          BigInt        @id @default(autoincrement())
  customerId  BigInt
  staffId     BigInt?
  bookingType BookingType
  carId       BigInt
  date        DateTime
  status      BookingStatus @default(PENDING)
  createdAt   DateTime      @default(now())

  customer User  @relation("CustomerBookings", fields: [customerId], references: [id])
  staff    User? @relation("StaffBookings", fields: [staffId], references: [id])
  car      Car   @relation(fields: [carId], references: [id])
}

enum BookingType {
  TEST_DRIVE
  INSPECTION
  SERVICE
}

enum VehicleCategory {
  SUV
  LIMUZINA
  KOMBI
  HATCHBACK
  KARAVAN
  PICKUP
  COUPE
  KABRIOLET
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum Role {
  KLIJENT
  ZAPOSLENIK
  ADMIN
}
